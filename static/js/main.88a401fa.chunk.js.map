{"version":3,"sources":["Components/QuoteBox/QuoteBox.jsx","Components/Share/Share.jsx","Components/New/New.jsx","App.js","serviceWorker.js","index.js"],"names":["library","add","faTwitter","QuoteBox","className","this","props","quote","author","href","target","rel","icon","color","size","onClick","getQuote","Component","Share","New","faKey","faSun","App","num","Math","round","random","quotation","state","quotes","text","quoteAuthor","setState","fetch","then","response","json","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uWAKAA,IAAQC,IAAIC,K,IACSC,E,uKAEjB,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,aACb,4BAAKC,KAAKC,MAAMC,OAChB,uBAAGH,UAAU,UAAUC,KAAKC,MAAME,SAElC,yBAAKJ,UAAU,WACf,uBAAGK,KAAI,gDAA2CJ,KAAKC,MAAMC,MAAtD,uBAAkFG,OAAO,SAASC,IAAI,uBAC3G,4BACID,OAAO,SACPN,UAAU,iBAEV,kBAAC,IAAD,CACEA,UAAU,cACVQ,KAAMV,IACNW,MAAM,UACNC,KAAK,SAIX,4BAAQV,UAAU,eAAeW,QAASV,KAAKC,MAAMU,UAArD,mB,GAtB0BC,a,MCKrBC,MARjB,WACI,OACE,yBAAKd,UAAU,W,MCMJe,MARjB,WACI,OACE,yBAAKf,UAAU,W,QCIrBJ,IAAQC,IAAImB,IAAOC,K,IAGEC,E,kDACnB,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAmBRU,SAAW,WAIT,EAAKO,IAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3B,IAAIC,EAAY,EAAKC,MAAMC,OAAO,EAAKN,KAAKO,KACxCC,EAAc,EAAKH,MAAMC,OAAO,EAAKN,KAAKf,OAC1CuB,EACF,EAAKC,SAAS,CACZzB,MAAOoB,EACPnB,OAAQuB,IAGV,EAAKC,SAAS,CACZzB,MAAOoB,EACPnB,OAAQ,eAjCZ,EAAKoB,MAAQ,CACXC,OAAQ,GACRtB,MAAO,GACPC,OAAQ,IAEV,EAAKe,IAAM,KAPM,E,gEAUE,IAAD,OAClBU,MAAM,+BACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAE,EAAKL,SAAS,CAACH,OAAQQ,IAAO,WACxC,EAAKrB,mB,+BA2BP,OACE,yBAAKZ,UAAU,iBACf,yBAAKA,UAAU,OACb,iDACA,kBAAC,IAAD,CACEQ,KAAK,MACLC,MAAM,UACNC,KAAK,OAEP,kBAAC,EAAD,CAEEE,SAAYX,KAAKW,SACjBT,MAASF,KAAKuB,MAAMrB,MACpBC,OAAUH,KAAKuB,MAAMpB,SAEvB,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GA1DyBS,aCAbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88a401fa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './QuoteBox.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nlibrary.add(faTwitter);\nexport default class QuoteBox extends Component {\n    render() {\n    return (\n      <div className=\"quote\">\n        <div className='quoteText'>\n          <h3>{this.props.quote}</h3>\n          <p className=\"author\">{this.props.author}</p>\n        </div>\n          <div className='buttons'>\n          <a href={`https://twitter.com/intent/tweet?text=${this.props.quote}&hashtags=outbright`} target=\"_blank\" rel=\"noopener noreferrer\">  \n            <button \n                target=\"_blank\"\n                className='twitterButton'\n                >\n                <FontAwesomeIcon \n                  className=\"twitterIcon\"\n                  icon={faTwitter}\n                  color=\"#9B870C\"\n                  size=\"3x\"\n                />\n            </button>\n            </a>  \n            <button className=\"customButton\" onClick={this.props.getQuote}>New Quote</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Share.css'\n\nfunction Share() {\n    return (\n      <div className=\"quote\">\n      \n      </div>\n    );\n  }\n  \n  export default Share;","import React from 'react';\nimport './New.css'\n\nfunction New() {\n    return (\n      <div className=\"quote\">\n      \n      </div>\n    );\n  }\n  \n  export default New;","import React, {Component } from 'react';\nimport './App.css';\nimport QuoteBox from './Components/QuoteBox/QuoteBox';\nimport Share from './Components/Share/Share';\nimport New from './Components/New/New';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faKey, faSun } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faKey, faSun);\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quote: '',\n      author: ''\n    }\n    this.num = null; \n  }\n  \n  componentDidMount() {\n    fetch(\"https://type.fit/api/quotes\")\n    .then(response=> response.json())\n    .then(data=>this.setState({quotes: data}, () =>{\n      this.getQuote();\n    }))\n  }\n\n  \n\n  getQuote = () => {\n    // this.setState({\n    //   quote: null\n    // })\n    this.num = Math.round(Math.random() * 1000);\n    let quotation = this.state.quotes[this.num].text;\n    let quoteAuthor = this.state.quotes[this.num].author;\n    if (quoteAuthor) {\n      this.setState({\n        quote: quotation,\n        author: quoteAuthor\n      })\n    } else {\n      this.setState({\n        quote: quotation,\n        author: 'Anonymous'\n      })\n    }  \n  }\n    \n  render() {\n    return (\n      <div className=\"container_div\">\n      <div className='box'>\n        <h1>Brighten Your Day</h1>\n        <FontAwesomeIcon \n          icon=\"sun\"\n          color=\"#9B870C\"\n          size=\"4x\"\n        />\n        <QuoteBox\n          // getQuote = {this.getQuote}\n          getQuote = {this.getQuote}\n          quote = {this.state.quote}\n          author = {this.state.author}\n        />\n        <Share/>\n        <New/>\n      </div>\n      \n    </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}